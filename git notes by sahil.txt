IMPORTANT-
Use Git commands to help keep track of changes made to a project:
git init creates a new Git repository
git status inspects the contents of the working directory and staging area
git add adds files from the working directory to the staging area
git diff shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository
git log shows a list of all previous commits
git show HEAD will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.
git checkout HEAD filename: Discards changes in the working directory.
git reset HEAD filename: Unstages file changes in the staging area.
git reset SHA: Can be used to reset to a previous commit in your commit history.

The following commands are useful in the Git branch workflow.
git branch: Lists all a Git project's branches.
git branch branch_name: Creates a new branch.
git checkout branch_name: Used to switch from one branch to another.
git merge branch_name: Used to join file changes from one branch to another.
git branch -d branch_name: Deletes the branch specified.

git clone: Creates a local copy of a remote.
git remote -v: Lists a Git project's remotes.
git fetch: Fetches work from the remote into the local copy.
git merge origin/master: Merges origin/master into your local branch.
git push origin <branch_name>: Pushes a local branch to the origin remote.

press q on your keyboard to exit diff mode and git log mode

Git is a software that allows you to keep track of changes made to a project over time. Git works by recording the changes you make to a project, storing those changes, then allowing you to reference them as needed.
Now that we have started working on the screenplay, let’s turn the sorcerers-code directory into a Git project. We do this with:

git init
The word init means initialize. The command sets up all the tools Git needs to begin tracking changes made to the project.

A Git project can be thought of as having three parts:

A Working Directory: where you'll be doing all the work: creating, editing, deleting and organizing files
A Staging Area: where you'll list changes you make to the working directory
A Repository: where Git permanently stores those changes as different versions of the project
The Git workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository. In Git, we save changes with a commit, which we will learn more about in this lesson.

As you write the screenplay, you will be changing the contents of the working directory. You can check the status of those changes with:

git status

In the output, notice the file in red under untracked files. Untracked means that Git sees the file but has not started tracking changes yet.

Check the status of the project in Git.

In order for Git to start tracking scene-1.txt, the file needs to be added to the staging area.

We can add a file to the staging area with:

git add filename
The word filename here refers to the name of the file you are editing, such as scene-1.txt.

Check the status of the project in Git.

In the output, notice that Git indicates the changes to be committed with "new file: scene-1.txt" in green text. Here Git tells us the file was added to the staging area.

Good work! Now you know how to add a file to the staging area.

Imagine that we type another line in scene-1.txt. Since the file is tracked, we can check the differences between the working directory and the staging area with:

git diff filename

From the terminal, use the new command to check the difference between the working directory and the staging area.

Notice the output:

"Harry Programmer and the Sorcerer's Code: Scene 1" is in the staging area, as indicated in white.
Changes to the file are marked with a + and are indicated in green.

3.
Add the changes to the staging area in Git. Recall that you will need to identify the file by its name.

A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.

However, one more bit of code is needed for a commit: the option -m followed by a message. Here's an example:

git commit -m "Complete first line of dialogue"
Standard Conventions for Commit Messages:

Must be in quotation marks
Written in the present tense
Should be brief (50 characters or less) when using -m

Often with Git, you'll need to refer back an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with:

git log

There are a few ways we can backtrack in git

In Git, the commit you are currently on is known as the HEAD commit. In many cases, the most recently made commit is the HEAD commit.

To see the HEAD commit, enter:

git show HEAD
The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.

What if you decide to change the ghost's line in the working directory, but then decide you wanted to discard that change?

You could rewrite the line how it was originally, but what if you forgot the exact wording? The command

git checkout HEAD filename
will restore the file in your working directory to look exactly as it did when you last made a commit.

The hamlet we are working on contains five files. In Git, it's common to change many files, add those files to the staging area, and commit them to Git in a single commit.

For example, say you want to change the character "LARRY" to "LAERTES" in the script. The name currently appears in two files. After you change the name in both files, you could add the changed files to the staging area with:

git add filename_1 filename_2
Note the word filename above refers to the name of the file you are adding to the staging area, such as scene-3.txt.

Great! The files you've added to the staging area belong in the same commit.

What if, before you commit, you accidentally delete an important line from scene-2.txt? Unthinkingly, you add scene-2.txt to the staging area. The file change is unrelated to the Larry/Laertes swap and you don't want to include it in the commit.

We can unstage that file from the staging area using

git reset HEAD filename
This command resets the file in the staging area to be the same as the HEAD commit. It does not discard file changes from the working directory, it just removes them from the staging area.

To try out the new command, let's make a mistake on purpose!

The code editor is open to scene-2.txt. Delete any line from the file and click Run.
2.
From the terminal, add scene-2.txt to the Git staging area.
3.
Now check the status of the Git project.

In the output, notice scene-2.txt under “Changes to be committed”.
4.
Use the new Git command to unstage scene-2.txt from the staging area.

Notice in the output, "Unstaged changes after reset":

M    scene-2.txt
M is short for "modification"
5.
Now that changes made to scene-2.txt have been booted out of the staging area, you're ready to commit. From the terminal, make a commit to save the Larry/Laertes name swap in hamlet.

Git enables you to rewind to the part before you made the wrong turn and create a new destiny for the project. You can do this with:

git reset SHA
This command works by using the first 7 characters of the SHA of a previous commit. For example, if the SHA of the previous commit is 5d692065cf51a2f50ea8e7b19b5a7ae512f633ba, use:

git reset 5d69206
1.
From the terminal, print out your Git commit log.

Note: If your cursor gets stuck in "git log" mode in the terminal, press "q" on your keyboard to escape.
2.
From the terminal, enter the command to reset to a previous commit, using the first 7 characters of one of the past commit SHAs in your Git log.

Next, print the Git commit log again.

Notice anything interesting? The commits that came after the one you reset to are gone. The HEAD commit has been reassigned. You just changed history.

you can use these skills to undo changes made to your Git project.

Up to this point, you've worked in a single Git branch called master. Git allows us to create branches to experiment with versions of a project. Imagine you want to create version of a story with a happy ending. You can create a new branch and make the happy ending changes to that branch only. It will have no effect on the master branch until you're ready to merge the happy ending to the master branch.

In this lesson, we'll be using Git branching to develop multiple versions of a resumé.

You can use the command below to answer the question: “which branch am I on?”

git branch
1.
Check what branch you are currently on.

In the output, the * (asterisk) is showing you what branch you’re on. The project only has one branch at this time.

Right now, the Git project has only one branch: master.

To create a new branch, use:

git branch new_branch
Here new_branch would be the name of the new branch you create, like photos or blurb. Be sure to name your branch something that describes the purpose of the branch. Also, branch names can’t contain whitespaces: new-branch and new_branch are valid branch names, but new branch is not.

The master and fencing branches are identical: they share the same exact commit history. You can switch to the new branch with

git checkout branch_name
Here, branch_name is the name of the branch. If the branch's name is skill

git checkout skill
Once you switch branch, be now able to make commits on the branch that have no impact on master.

You can continue your workflow, while master stays intact!

Congratulations! You have switched to a new branch. All the commands you do on master, you can also do on this branch.

For example, to add files to the staging area, use:

git add filename
And to commit, use:

git commit -m "Commit message"

Print the Git commit log.

Notice the output:

The commits you see were all made in the master branch. fencing inherited them.
This means that every commit master has, fencing also has.

What if you wanted include all the changes made to the fencing branch on the master branch? We can easily accomplish this by merging the branch into master with:

git merge branch_name
For example, if I wanted to merge the skills branch to master, I would enter

git merge skills
In a moment, you'll merge branches. Keep in mind:

Your goal is to update master with changes you made to fencing.
fencing is the giver branch, since it provides the changes.
master is the receiver branch, since it accepts those changes.

You are currently on the fencing branch. Switch over to the master branch.

From the terminal, merge the fencing branch into the master branch.

Notice the output: The merge is a "fast forward" because Git recognizes that fencing contains the most recent commit. Git fast forwards master to be up to date with fencing.

The merge was successful because master had not changed since we made a commit on fencing. Git knew to simply update master with changes on fencing.

What would happen if you made a commit on master before you merged the two branches? Furthermore, what if the commit you made on master altered the same exact text you worked on in fencing? When you switch back to master and ask Git to merge the two branches, Git doesn't know which changes you want to keep. This is called a merge conflict.

Let's say you decide you'd like to merge the changes from fencing into master.

1.
Switch to the master branch.
2.
From the terminal, enter the command below:

git merge fencing
This will try to merge fencing into master.

In the output, notice the lines:

CONFLICT (content): Merge conflict in resumé.txt
Automatic merge failed; fix conflicts and then commit the result.
3.
We must fix the merge conflict.

In the code editor, look at resume.txt. Git uses markings to indicate the HEAD (master) version of the file and the fencing version of the file, like this:

<<<<<<< HEAD
master version of line
=======
fencing version of line
>>>>>>> fencing
Git asks us which version of the file to keep: the version on master or the version on fencing. You decide you want the fencing version.

From the code editor:

Delete the content of the line as it appears in the master branch

Delete all of Git's special markings including the words HEAD and fencing. If any of Git's markings remain, for example, >>>>>>> and =======, the conflict remains.

Try reloading the page if Git's markings don't show up.
4.
Add resume.txt to the staging area.
5.
Now, make a commit. 

In Git, branches are usually a means to an end. You create them to work on a new project feature, but the end goal is to merge that feature into the master branch. After the branch has been integrated into master, it has served its purpose and can be deleted.

The command

git branch -d branch_name
will delete the specified branch from your Git project.

Now that master contains all the file changes that were in fencing, let's delete fencing.

Git branching allows users to experiment with different versions of a project by checking out separate branches to work on.

A remote is a shared Git repository that allows multiple collaborators to work on the same Git project from different locations. Collaborators work on the project independently, and merge changes together when they are ready to do so.

Sally has created the remote repository, science-quizzes in the directory curriculum, which teachers on the school's shared network have access to. In order to get your own replica of science-quizzes, you'll need to clone it with:

git clone remote_location clone_name

In this command: 

remote_location tells Git where to go to find the remote. This could be a web address, or a filepath, such as:
/Users/teachers/Documents/some-remote
clone_name is the name you give to the directory in which Git will clone the repository.

One thing that Git does behind the scenes when you clone science-quizzes is give the remote address the name origin, so that you can refer to it more conveniently. In this case, Sally's remote is origin.

You can see a list of a Git project's remotes with the command:

git remote -v

Using the file navigator, examine the contents of the cloned Git project. There are a few quiz files here, which we will be working with during this lesson.

Open a file of your choice in the code editor.

2.
Change directories into the my-quizzes directory, enter this command on the terminal:

cd my-quizzes
To learn more about cd, take a look at our command line course.

3.
Enter git remote -v to list the remotes.
Notice the output:

origin    /home/ccuser/workspace/curriculum/science-quizzes (fetch)
origin    /home/ccuser/workspace/curriculum/science-quizzes (push)
Git lists the name of the remote, origin, as well as its location.
Git automatically names this remote origin, because it refers to the remote repository of origin. However, it is possible to safely change its name.
The remote is listed twice: once for (fetch) and once for (push). We'll learn about these later in the lesson.

After you cloned science-quizzes, you had to run off to teach a class. Now that you're back at your computer, there's a problem: what if, while you were teaching, Sally changed the science-quizzes Git project in some way. If so, your clone will no longer be up-to-date.

An easy way to see if changes have been made to the remote and bring the changes down to your local copy is with:

git fetch
This command will not merge changes from the remote into your local repository. It brings those changes onto what's called a remote branch. Learn more about how this works below.
1.
Enter this command:

cd my-quizzes
to go into the my-quizzes directory.
2.
Fetch any new changes Sally may have made to the remote.

Even though Sally's new commits have been fetched to your local copy of the Git project, those commits are on the origin/master branch. Your local master branch has not been updated yet, so you can't view or make changes to any of the work she has added.

In Lesson III, Git Branching we learned how to merge braches. Now we'll use the git merge command to integrate origin/master into your local master branch. The command:

git merge origin/master
will accomplish this for us.
1.
Enter this command:

cd my-quizzes
to go into the my-quizzes directory.
2.
You are on your local master branch. In your commit history, the commit message of the HEAD commit is:

Add first question to Physics     quiz
From the terminal, merge with origin/master, where Sally's most recent commits are.

Notice the output:

Updating a2ba090..bc87a1a
Fast-forward
 biology.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
Git has performed a "fast-forward" merge, bringing your local master branch up to speed with Sally's most recent commit on the remote.
3.
Print the commit history.

In the output, notice that the HEAD commit has changed. The commit message now reads:

 Add heading and comment to biology quiz

Now that you've merged origin/master into your local master branch, you're ready to contribute some work of your own. The workflow for Git collaborations typically follows this order:

Fetch and merge changes from the remote
Create a branch to work on a new project feature
Develop the feature on your branch and commit your work
Fetch and merge from the remote again (in case new commits were made while you were working)
Push your branch up to the remote for review
Steps 1 and 4 are a safeguard against merge conflicts, which occur when two branches contain file changes that cannot be merged with the git merge command. Step 5 involves git push, a command you will learn in the next exercise.
1.
Enter this command:

cd my-quizzes
to change directories into the my-quizzes directory.
2.
Enter the Git command:

git branch <branch_name>
to create a branch to develop questions for the biology quiz. Name the branch bio-questions.

Note: be careful to spell the name "bio-questions" exactly as it appears.
3.
Switch to your new branch with the command:

git checkout <branch_name>
replacing <branch_name> with the name of the new branch.
4.
On your branch, open biology.txt in the code editor.

Add a biology question to the file and some sample answers. For example:

  What is an animal that hunts and eats other animals called?
  a) herbivore
  b) prey 
  c) ecosystem 
  d) predator
5.
Add biology.txt to the staging area.
6.
Commit the work to the repository with a commit message.

Now it's time to share our work with Sally.

The command:

git push origin your_branch_name
will push your branch up to the remote, origin. From there, Sally can review your branch and merge your work into the master branch, making it part of the definitive project version.
1.
Enter this command

cd my-quizzes
to change directories into the my-quizzes directory.
2.
Push your branch up to the remote.

In the output, notice the line:

To /home/ccuser/workspace/curriculum/science-quizzes
 * [new branch]      bio-questions -> bio-questions
Git informs us that the branch bio-questions was pushed up to the remote. Sally can now review your new work and can merge it into the remote's master branch.

Congratulations, you now know enough to start collaborating on Git projects! Let's review.

A remote is a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.
The Git Collaborative Workflow are steps that enable smooth project development when multiple collaborators are working on the same Git project.

Git projects are usually managed on Github, a website that hosts Git projects for millions of users. With Github you can access your projects from anywhere in the world by using the basic workflow you learned here.


A change